{"ast":null,"code":"import _defineProperty from \"/Users/david.lozzi/git/dansDiet/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable prefer-promise-reject-errors */\nimport axios from 'axios';\nimport CONFIG from 'config';\nimport { getFromLocalStorage } from 'utils/localStorage/localStorage';\naxios.defaults.baseURL = CONFIG.SERVER_URL;\naxios.interceptors.request.use(config => {\n  let accessToken = '';\n\n  if (config.url.indexOf(CONFIG.AUTH_URL) === -1) {\n    accessToken = getFromLocalStorage(CONFIG.ACCESS_TOKEN);\n\n    if (!accessToken) {\n      window.location.href = '/';\n      return Promise.reject(new axios.Cancel('Auth failed'));\n    }\n  }\n\n  return _objectSpread({}, config, {\n    headers: _objectSpread({}, config.headers, {\n      authorization: \"Bearer \".concat(accessToken.accessToken.accessToken)\n    })\n  });\n}, error => Promise.reject(error));\naxios.interceptors.response.use(response => {\n  switch (response.status) {\n    default:\n      return response.data;\n  }\n}, error => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        window.location.reload();\n        return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.AUTH_FAILED));\n\n      case 403:\n        return Promise.reject({\n          message: CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.FORBIDDEN,\n          error\n        });\n\n      case 404:\n        return Promise.reject({\n          message: CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.NOT_FOUND,\n          error\n        });\n\n      default:\n        return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.UNKNOWN_CODE, error.response));\n    }\n  } else if (error.request) {\n    return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.NETWORK_ERROR, error.request));\n  } else {\n    return Promise.reject({\n      cancelled: true\n    });\n  }\n});","map":{"version":3,"sources":["/Users/david.lozzi/git/dansDiet/web/src/config-axios.js"],"names":["axios","CONFIG","getFromLocalStorage","defaults","baseURL","SERVER_URL","interceptors","request","use","config","accessToken","url","indexOf","AUTH_URL","ACCESS_TOKEN","window","location","href","Promise","reject","Cancel","headers","authorization","error","response","status","data","reload","Error","DISPLAY_TEXT","ERROR_MESSAGES","AUTH_FAILED","message","FORBIDDEN","NOT_FOUND","UNKNOWN_CODE","NETWORK_ERROR","cancelled"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,mBAAT,QAAoC,iCAApC;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBH,MAAM,CAACI,UAAhC;AAEAL,KAAK,CAACM,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACzC,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAID,MAAM,CAACE,GAAP,CAAWC,OAAX,CAAmBX,MAAM,CAACY,QAA1B,MAAwC,CAAC,CAA7C,EAAgD;AAC9CH,IAAAA,WAAW,GAAGR,mBAAmB,CAACD,MAAM,CAACa,YAAR,CAAjC;;AACA,QAAI,CAACJ,WAAL,EAAkB;AAChBK,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAe,IAAInB,KAAK,CAACoB,MAAV,CAAiB,aAAjB,CAAf,CAAP;AACD;AACF;;AACD,2BACKX,MADL;AAEEY,IAAAA,OAAO,oBACFZ,MAAM,CAACY,OADL;AAELC,MAAAA,aAAa,mBAAYZ,WAAW,CAACA,WAAZ,CAAwBA,WAApC;AAFR;AAFT;AAOD,CAhBD,EAgBIa,KAAD,IAAWL,OAAO,CAACC,MAAR,CAAeI,KAAf,CAhBd;AAmBAvB,KAAK,CAACM,YAAN,CAAmBkB,QAAnB,CAA4BhB,GAA5B,CAAiCgB,QAAD,IAAc;AAC5C,UAAQA,QAAQ,CAACC,MAAjB;AACE;AACE,aAAOD,QAAQ,CAACE,IAAhB;AAFJ;AAID,CALD,EAKIH,KAAD,IAAW;AACZ,MAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB,YAAQD,KAAK,CAACC,QAAN,CAAeC,MAAvB;AACE,WAAK,GAAL;AACEV,QAAAA,MAAM,CAACC,QAAP,CAAgBW,MAAhB;AACA,eAAOT,OAAO,CAACC,MAAR,CAAe,IAAIS,KAAJ,CAAU3B,MAAM,CAAC4B,YAAP,CAAoBC,cAApB,CAAmCC,WAA7C,CAAf,CAAP;;AACF,WAAK,GAAL;AACE,eAAOb,OAAO,CAACC,MAAR,CAAe;AAAEa,UAAAA,OAAO,EAAE/B,MAAM,CAAC4B,YAAP,CAAoBC,cAApB,CAAmCG,SAA9C;AAAyDV,UAAAA;AAAzD,SAAf,CAAP;;AACF,WAAK,GAAL;AACE,eAAOL,OAAO,CAACC,MAAR,CAAe;AAAEa,UAAAA,OAAO,EAAE/B,MAAM,CAAC4B,YAAP,CAAoBC,cAApB,CAAmCI,SAA9C;AAAyDX,UAAAA;AAAzD,SAAf,CAAP;;AACF;AACE,eAAOL,OAAO,CAACC,MAAR,CAAe,IAAIS,KAAJ,CAAU3B,MAAM,CAAC4B,YAAP,CAAoBC,cAApB,CAAmCK,YAA7C,EAA2DZ,KAAK,CAACC,QAAjE,CAAf,CAAP;AATJ;AAWD,GAZD,MAYO,IAAID,KAAK,CAAChB,OAAV,EAAmB;AACxB,WAAOW,OAAO,CAACC,MAAR,CAAe,IAAIS,KAAJ,CAAU3B,MAAM,CAAC4B,YAAP,CAAoBC,cAApB,CAAmCM,aAA7C,EAA4Db,KAAK,CAAChB,OAAlE,CAAf,CAAP;AACD,GAFM,MAEA;AACL,WAAOW,OAAO,CAACC,MAAR,CAAe;AAAEkB,MAAAA,SAAS,EAAE;AAAb,KAAf,CAAP;AACD;AACF,CAvBD","sourcesContent":["/* eslint-disable prefer-promise-reject-errors */\nimport axios from 'axios';\nimport CONFIG from 'config';\n\nimport { getFromLocalStorage } from 'utils/localStorage/localStorage';\n\naxios.defaults.baseURL = CONFIG.SERVER_URL;\n\naxios.interceptors.request.use((config) => {\n  let accessToken = '';\n  if (config.url.indexOf(CONFIG.AUTH_URL) === -1) {\n    accessToken = getFromLocalStorage(CONFIG.ACCESS_TOKEN);\n    if (!accessToken) {\n      window.location.href = '/';\n      return Promise.reject(new axios.Cancel('Auth failed'));\n    }\n  }\n  return {\n    ...config,\n    headers: {\n      ...config.headers,\n      authorization: `Bearer ${accessToken.accessToken.accessToken}`\n    }\n  };\n}, (error) => Promise.reject(error)\n);\n\naxios.interceptors.response.use((response) => {\n  switch (response.status) {\n    default:\n      return response.data;\n  }\n}, (error) => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        window.location.reload();\n        return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.AUTH_FAILED));\n      case 403:\n        return Promise.reject({ message: CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.FORBIDDEN, error });\n      case 404:\n        return Promise.reject({ message: CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.NOT_FOUND, error });\n      default:\n        return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.UNKNOWN_CODE, error.response));\n    }\n  } else if (error.request) {\n    return Promise.reject(new Error(CONFIG.DISPLAY_TEXT.ERROR_MESSAGES.NETWORK_ERROR, error.request));\n  } else {\n    return Promise.reject({ cancelled: true });\n  }\n});\n"]},"metadata":{},"sourceType":"module"}